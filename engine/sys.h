/*
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
#ifndef ENGINE_SYS_H
#define ENGINE_SYS_H

#include <SDL2/SDL.h>

#include "quakedef.h"
#include "eiface.h"
#include "progdefs.h"

const int FIFTEEN_MB = (15 * 1024 * 1024);
// TODO: Ridiculously low memory size represent. change this. - Solokiller
#define FIFTEEN_MB (15 * 1024 * 1024)

#define MINIMUM_WIN_MEMORY 0x0E00000
#define MAXIMUM_WIN_MEMORY 0x8000000	   // Ask for 128 MB max
#define MAXIMUM_DEDICATED_MEMORY 0x2800000 // Ask for 40 MB max
#define WARNING_MEMORY 0x0200000
#define DEFAULT_MEMORY 0x2800000
#define LISTENSERVER_SAFE_MINIMUM_MEMORY 0x1000001 //~16 Mb

/**
 *	@file
 *
 *	non-portable functions
 */

/**
 *	@addtogroup System_IO
 *
 *	@{
 */

using PrintfFunc = void (*)(const char*, ...);

/**
 *	Send text to the console
 */
void Sys_Printf(const char* fmt, ...);

/**
 *	An error will cause the entire program to exit
 */
void Sys_Error(const char* error, ...);

void Sys_Warning(const char* pszWarning, ...);

void Sys_DebugOutStraight(const char* pStr);

extern PrintfFunc Launcher_ConsolePrintf;

/** @} */

const char* Sys_FindFirstPathID(const char* path, char* pathid);

const char* Sys_FindFirst(const char* path, char* basename);

const char* Sys_FindNext(char* basename);

void Sys_FindClose();

void ForceReloadProfile();

double Sys_FloatTime();

void Sys_ShutdownFloatTime();

void GameSetSubState(int iSubState);
void GameSetState(int iState);
void Dispatch_Substate(int iSubState);
void GameSetBackground(bool bNewSetting);

bool Sys_IsWin95();
bool Sys_IsWin98();

void Sys_CheckOSVersion();

void Sys_Init();
void Sys_Shutdown();

void Sys_Quit();

void Sys_GetCDKey(char* pszCDKey, int* nLength, int* bDedicated);

#define MAX_SPLITPATH_BUF 255

/**
 *	Splits a path into its individual components
 *	@param[ in ] path Path to split
 *	@param[ out ] drive Optional. The drive letter, if present. Contains the colon
 *	@param[ out ] dir Required. The directory component of the path, including leading and trailing slashes, if present
 *	@param[ out ] fname Optional. The filename component, if present
 *	@param[ out ] ext Optional. The extension component, if present
 */
void Sys_SplitPath(const char* path, char* drive, char* dir, char* fname, char* ext);

double Sys_DoubleTime(void);

void Sys_Sleep(int msec);

void Sys_PageIn(void* ptr, int size);

void Sys_MakeCodeWriteable(unsigned long startaddr, unsigned long length);

void AlertMessage(ALERT_TYPE atype, const char* szFmt, ...);

void EngineFprintf();

const int MAX_EXT_DLLS = 50;

struct functiontable_t
{
	uint32 pFunction;
	char* pFunctionName;
};

struct extensiondll_t
{
	CSysModule* pDLLHandle;
	functiontable_t* functionTable;
	int functionCount;
};

using FIELDIOFUNCTION = void (*)();

/**
 *	Gets a dllexported function from the first DLL that exports it.
 */
FIELDIOFUNCTION GetIOFunction(const char* pName);

using DISPATCHFUNCTION = void (*)(entvars_s*, void*);

/**
 *	Gets a dllexported function from the first DLL that exports it.
 *	Returns functions to dispatch events to entities
 */
DISPATCHFUNCTION GetDispatch(const char* pname);

using ENTITYINIT = void (*)(entvars_s*);

/**
 *	Gets a dllexported function from the first DLL that exports it.
 *	Returns entity initialization functions, generated by LINK_ENTITY_TO_CLASS
 */
ENTITYINIT GetEntityInit(const char* pClassName);

/**
 *	Loads all entity DLLs.
 *	@param szBaseDir Base directory to look for entity dlls in if no liblist could be loaded
 */
void LoadEntityDLLs(const char* szBaseDir);

/**
 *	Releases all entity dlls.
 *	Note: not repeatable, extdll info is not released and will not be reused.
 */
void ReleaseEntityDlls();

bool Sys_InitGame(char* lpOrgCmdLine, char* pBaseDir, void* pwnd, bool bIsDedicated);
void Sys_ShutdownGame();

void ClearIOStates();

void SetRateRegistrySetting(const char* pchRate);
const char* GetRateRegistrySetting(const char* pchDef);

const char* GetCurrentSteamAppName();

const char* NameForFunction(uint32 function);
uint32 FunctionFromName(const char* pName);

void IN_ActivateMouse();
void IN_DeactivateMouse();
void IN_ClearStates();
void IN_MouseEvent(int mstate);

qboolean Voice_GetClientListening(int iReceiver, int iSender);
qboolean Voice_SetClientListening(int iReceiver, int iSender, qboolean bListen);

extern bool gHasMMXTechnology;

using FlipScreenFn = void (*)();

extern FlipScreenFn VID_FlipScreen;

extern bool gfBackground;

extern int giActive;
extern int giStateInfo;
extern int giSubState;

extern bool gfExtendedError;
extern char gszDisconnectReason[256];
extern char gszExtendedDisconnectReason[256];

extern bool g_bIsDedicatedServer;

extern SDL_Window* pmainwindow;

#endif // ENGINE_SYS_H
